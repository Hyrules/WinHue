<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:resx="clr-namespace:WinHue3.Resources"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:tb="http://www.hardcodet.net/taskbar"
        xmlns:mainForm="clr-namespace:WinHue3.MainForm"
        xmlns:converters="clr-namespace:WinHue3.Functions.Converters"
        xmlns:sliders="clr-namespace:WinHue3.MainForm.Sliders"
        xmlns:common="clr-namespace:WinHue3.Philips_Hue.HueObjects.Common"
        xmlns:behaviors="clr-namespace:WinHue3.Functions.Behaviors"
        xmlns:controls="clr-namespace:WinHue3.Controls"
        xmlns:ruleObject="clr-namespace:WinHue3.Philips_Hue.HueObjects.RuleObject"
        xmlns:sceneObject="clr-namespace:WinHue3.Philips_Hue.HueObjects.SceneObject"
        xmlns:scheduleObject="clr-namespace:WinHue3.Philips_Hue.HueObjects.ScheduleObject"
        xmlns:newSensorsObject="clr-namespace:WinHue3.Philips_Hue.HueObjects.NewSensorsObject"
        xmlns:groupObject="clr-namespace:WinHue3.Philips_Hue.HueObjects.GroupObject"
        xmlns:lightObject="clr-namespace:WinHue3.Philips_Hue.HueObjects.LightObject"
        xmlns:resourcelinkObject="clr-namespace:WinHue3.Philips_Hue.HueObjects.ResourceLinkObject"
        xmlns:roomMap="clr-namespace:WinHue3.Functions.RoomMap"
        xmlns:uShortUpDown="clr-namespace:WinHue3.Controls.UShortUpDown"
        xmlns:byteUpDown="clr-namespace:WinHue3.Controls.ByteUpDown"
        x:Class="WinHue3.MainForm.MainWindow"
    Title="{Binding Title}" Height="824.356" Width="1349.484" 
    WindowStartupLocation="CenterScreen" MinHeight="600" MinWidth="800" 
    Icon="/WinHue3;component/Resources/HueGroupOn-Large.png" Closing="Window_Closing"  
    ResizeMode="CanResizeWithGrip" x:Name="MainForm" BorderThickness="0" 
    behaviors:WindowContentRenderedBehavior.Command="{Binding InitializeCommand}" StateChanged="MainForm_StateChanged" Loaded="MainForm_Loaded"
    >

    <Window.Resources>
        <DataTemplate x:Key="BridgeTemplate">
            <Expander Header="Bridge"/>
        </DataTemplate>
        <Style x:Key="ImageEnabled" TargetType="{x:Type Image}">
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Opacity" Value="0.50"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <converters:DoubleToDecimalConverter x:Key="DoubleToDecimalConverter"/>
        <converters:DoubleToUShortConverter x:Key="SliderToUshortConverter"/>
        <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
        <Style x:Key="LeftMenuButtonsStyle" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="Padding" Value="35,0,0,0"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="Width" Value="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type WrapPanel}}}"/>
            <Setter Property="Template" Value="{DynamicResource ButtonBaseControlTemplate1}"/>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" Value="Transparent"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="SideExpanderStyle" TargetType="{x:Type Expander}">
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="FontSize" Value="18"/>
            <Setter Property="Width" Value="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type WrapPanel}}}"/>
        </Style>


        <Style x:Key="TbWrap" TargetType="{x:Type TextBlock}" >
            <Setter Property="TextWrapping" Value="NoWrap"/>
            <Setter Property="Width" Value="auto"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding DataContext.MainFormModel.WrapText, ElementName=MainForm}" Value="True" >
                    <Setter Property="TextWrapping" Value="Wrap"/>
                    <Setter Property="Width" Value="75"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="TbxWrap" TargetType="{x:Type TextBox}" >
            <Setter Property="TextWrapping" Value="NoWrap"/>
            <Setter Property="Width" Value="auto"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="IsHitTestVisible" Value="False"/>
            <Setter Property="Background" Value="Transparent"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding DataContext.MainFormModel.WrapText, ElementName=MainForm}" Value="True">
                    <Setter Property="TextWrapping" Value="Wrap"/>
                    <Setter Property="Width" Value="75"/>
                </DataTrigger>
            </Style.Triggers>

        </Style>

        <ControlTemplate x:Key="ExpanderControlTemplate1" TargetType="{x:Type Expander}">
            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="3" SnapsToDevicePixels="True">
                <DockPanel>
                    <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                        <ToggleButton.FocusVisualStyle>
                            <Style>
                                <Setter Property="Control.Template">
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <Border>
                                                <Rectangle Margin="0" SnapsToDevicePixels="True" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
                                            </Border>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ToggleButton.FocusVisualStyle>
                        <ToggleButton.Style>
                            <Style TargetType="{x:Type ToggleButton}">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                            <Border Padding="{TemplateBinding Padding}">
                                                <Grid Background="Transparent" SnapsToDevicePixels="False">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="19"/>
                                                        <ColumnDefinition Width="*"/>
                                                    </Grid.ColumnDefinitions>
                                                    <Ellipse x:Name="circle" Fill="Transparent" HorizontalAlignment="Center" Height="19" Stroke="white" VerticalAlignment="Center" Width="19"/>
                                                    <Path x:Name="arrow" Data="M1,1.5L4.5,5 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="False" Stroke="white" StrokeThickness="2" VerticalAlignment="Center"/>
                                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                                                </Grid>
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsChecked" Value="True">
                                                    <Setter Property="Data" TargetName="arrow" Value="M1,4.5L4.5,1 8,4.5"/>
                                                </Trigger>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Stroke" TargetName="circle" Value="#FF5593FF"/>
                                                    <!--<Setter Property="Fill" TargetName="circle" Value="#FFF3F9FF"/>-->
                                                    <Setter Property="Stroke" TargetName="arrow" Value="Black"/>
                                                </Trigger>
                                                <Trigger Property="IsPressed" Value="True">
                                                    <Setter Property="Stroke" TargetName="circle" Value="#FF3C77DD"/>
                                                    <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                                    <!--<Setter Property="Fill" TargetName="circle" Value="#FFD9ECFF"/>-->
                                                    <Setter Property="Stroke" TargetName="arrow" Value="Black"/>
                                                </Trigger>
                                                <Trigger Property="IsEnabled" Value="False">
                                                    <Setter Property="Stroke" TargetName="circle" Value="#FFBCBCBC"/>
                                                    <!--<Setter Property="Fill" TargetName="circle" Value="#FFE6E6E6"/>-->
                                                    <Setter Property="Stroke" TargetName="arrow" Value="#FF707070"/>
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ToggleButton.Style>
                    </ToggleButton>
                    <ContentPresenter x:Name="ExpandSite" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" DockPanel.Dock="Bottom" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                </DockPanel>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsExpanded" Value="True">
                    <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                </Trigger>
                <Trigger Property="ExpandDirection" Value="Right">
                    <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                    <Setter Property="Style" TargetName="HeaderSite">
                        <Setter.Value>
                            <Style TargetType="{x:Type ToggleButton}">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                            <Border Padding="{TemplateBinding Padding}">
                                                <Grid Background="Transparent" SnapsToDevicePixels="False">
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition Height="19"/>
                                                        <RowDefinition Height="*"/>
                                                    </Grid.RowDefinitions>
                                                    <Grid>
                                                        <Grid.LayoutTransform>
                                                            <TransformGroup>
                                                                <RotateTransform Angle="-90"/>
                                                            </TransformGroup>
                                                        </Grid.LayoutTransform>
                                                        <Ellipse x:Name="circle" Fill="Transparent" HorizontalAlignment="Center" Height="19" Stroke="white" VerticalAlignment="Center" Width="19"/>
                                                        <Path x:Name="arrow" Data="M1,1.5L4.5,5 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="False" Stroke="white" StrokeThickness="2" VerticalAlignment="Center"/>
                                                    </Grid>
                                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                                                </Grid>
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsChecked" Value="True">
                                                    <Setter Property="Data" TargetName="arrow" Value="M1,4.5L4.5,1 8,4.5"/>
                                                </Trigger>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Stroke" TargetName="circle" Value="#FF5593FF"/>
                                                    <!--<Setter Property="Fill" TargetName="circle" Value="#FFF3F9FF"/>-->
                                                    <Setter Property="Stroke" TargetName="arrow" Value="Black"/>
                                                </Trigger>
                                                <Trigger Property="IsPressed" Value="True">
                                                    <Setter Property="Stroke" TargetName="circle" Value="#FF3C77DD"/>
                                                    <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                                    <!--<Setter Property="Fill" TargetName="circle" Value="#FFD9ECFF"/>-->
                                                    <Setter Property="Stroke" TargetName="arrow" Value="Black"/>
                                                </Trigger>
                                                <Trigger Property="IsEnabled" Value="False">
                                                    <Setter Property="Stroke" TargetName="circle" Value="#FFBCBCBC"/>
                                                    <!--<Setter Property="Fill" TargetName="circle" Value="#FFE6E6E6"/>-->
                                                    <Setter Property="Stroke" TargetName="arrow" Value="#FF707070"/>
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Setter.Value>
                    </Setter>
                </Trigger>
                <Trigger Property="ExpandDirection" Value="Up">
                    <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                    <Setter Property="Style" TargetName="HeaderSite">
                        <Setter.Value>
                            <Style TargetType="{x:Type ToggleButton}">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                            <Border Padding="{TemplateBinding Padding}">
                                                <Grid Background="Transparent" SnapsToDevicePixels="False">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="19"/>
                                                        <ColumnDefinition Width="*"/>
                                                    </Grid.ColumnDefinitions>
                                                    <Grid>
                                                        <Grid.LayoutTransform>
                                                            <TransformGroup>
                                                                <RotateTransform Angle="180"/>
                                                            </TransformGroup>
                                                        </Grid.LayoutTransform>
                                                        <Ellipse x:Name="circle" Fill="White" HorizontalAlignment="Center" Height="19" Stroke="#FF333333" VerticalAlignment="Center" Width="19"/>
                                                        <Path x:Name="arrow" Data="M1,1.5L4.5,5 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="False" Stroke="#FF333333" StrokeThickness="2" VerticalAlignment="Center"/>
                                                    </Grid>
                                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                                                </Grid>
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsChecked" Value="True">
                                                    <Setter Property="Data" TargetName="arrow" Value="M1,4.5L4.5,1 8,4.5"/>
                                                </Trigger>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Stroke" TargetName="circle" Value="#FF5593FF"/>
                                                    <!--<Setter Property="Fill" TargetName="circle" Value="#FFF3F9FF"/>-->
                                                    <Setter Property="Stroke" TargetName="arrow" Value="Black"/>
                                                </Trigger>
                                                <Trigger Property="IsPressed" Value="True">
                                                    <Setter Property="Stroke" TargetName="circle" Value="#FF3C77DD"/>
                                                    <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                                    <!--<Setter Property="Fill" TargetName="circle" Value="#FFD9ECFF"/>-->
                                                    <Setter Property="Stroke" TargetName="arrow" Value="Black"/>
                                                </Trigger>
                                                <Trigger Property="IsEnabled" Value="False">
                                                    <Setter Property="Stroke" TargetName="circle" Value="#FFBCBCBC"/>
                                                    <!--<Setter Property="Fill" TargetName="circle" Value="#FFE6E6E6"/>-->
                                                    <Setter Property="Stroke" TargetName="arrow" Value="#FF707070"/>
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Setter.Value>
                    </Setter>
                </Trigger>
                <Trigger Property="ExpandDirection" Value="Left">
                    <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                    <Setter Property="Style" TargetName="HeaderSite">
                        <Setter.Value>
                            <Style TargetType="{x:Type ToggleButton}">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                            <Border Padding="{TemplateBinding Padding}">
                                                <Grid Background="Transparent" SnapsToDevicePixels="False">
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition Height="19"/>
                                                        <RowDefinition Height="*"/>
                                                    </Grid.RowDefinitions>
                                                    <Grid>
                                                        <Grid.LayoutTransform>
                                                            <TransformGroup>
                                                                <RotateTransform Angle="90"/>
                                                            </TransformGroup>
                                                        </Grid.LayoutTransform>
                                                        <Ellipse x:Name="circle" Fill="White" HorizontalAlignment="Center" Height="19" Stroke="#FF333333" VerticalAlignment="Center" Width="19"/>
                                                        <Path x:Name="arrow" Data="M1,1.5L4.5,5 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="False" Stroke="#FF333333" StrokeThickness="2" VerticalAlignment="Center"/>
                                                    </Grid>
                                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                                                </Grid>
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsChecked" Value="True">
                                                    <Setter Property="Data" TargetName="arrow" Value="M1,4.5L4.5,1 8,4.5"/>
                                                </Trigger>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Stroke" TargetName="circle" Value="#FF5593FF"/>
                                                    <!--<Setter Property="Fill" TargetName="circle" Value="#FFF3F9FF"/>-->
                                                    <Setter Property="Stroke" TargetName="arrow" Value="Black"/>
                                                </Trigger>
                                                <Trigger Property="IsPressed" Value="True">
                                                    <Setter Property="Stroke" TargetName="circle" Value="#FF3C77DD"/>
                                                    <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                                    <!--<Setter Property="Fill" TargetName="circle" Value="#FFD9ECFF"/>-->
                                                    <Setter Property="Stroke" TargetName="arrow" Value="Black"/>
                                                </Trigger>
                                                <Trigger Property="IsEnabled" Value="False">
                                                    <Setter Property="Stroke" TargetName="circle" Value="#FFBCBCBC"/>
                                                    <!--<Setter Property="Fill" TargetName="circle" Value="#FFE6E6E6"/>-->
                                                    <Setter Property="Stroke" TargetName="arrow" Value="#FF707070"/>
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Setter.Value>
                    </Setter>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate x:Key="ButtonBaseControlTemplate1" TargetType="{x:Type ButtonBase}">
            <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" Background="Transparent" SnapsToDevicePixels="True">
                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="Button.IsDefaulted" Value="True">
                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" TargetName="border" Value="DeepSkyBlue"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="Transparent"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" TargetName="border" Value="Transparent"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="Transparent"/>
                </Trigger>
                <Trigger Property="ToggleButton.IsChecked" Value="True">
                    <Setter Property="Background" TargetName="border" Value="Transparent"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="Transparent"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" TargetName="border" Value="Transparent"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="Transparent"/>
                    <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FF838383"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </Window.Resources>

    <Window.DataContext>
        <mainForm:MainFormViewModel/>
    </Window.DataContext>



    <DockPanel LastChildFill="True">
        <Menu DockPanel.Dock="Top" Height="31" VerticalAlignment="Top" Background="{StaticResource HeaderBackgroundBrush}" Foreground="White" >
            <MenuItem Header="{x:Static resx:GUI.MainForm_Menu_File}" FontSize="17" Foreground="White" >
                <MenuItem Header="{x:Static resx:GUI.MainForm_Menu_Settings}" Command="{Binding OpenSettingsWindowCommand}" FontSize="17" Foreground="Black" >
                    <MenuItem.Icon>
                        <Image Source="/WinHue3;component/Resources/settings.png" Height="24"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="{x:Static resx:GUI.MainForm_Menu_BridgePairing}" Command="{Binding DoBridgePairingCommand}" FontSize="17" Foreground="Black">
                    <MenuItem.Icon>
                        <Image Source="/WinHue3;component/Resources/pair-bridge.png" Height="24"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="{x:Static resx:GUI.MainForm_Menu_VirtualBridge}" Command="{Binding LoadVirtualBridgeCommand}" FontSize="17" Foreground="Black">
                    <MenuItem.Style>
                        <Style TargetType="{x:Type MenuItem}">
                            <Setter Property="Visibility" Value="Collapsed"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsMasterDebugger}" Value="True">
                                    <Setter Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </MenuItem.Style>
                </MenuItem>
                <Separator/>
                <MenuItem Header="{x:Static resx:GUI.MainForm_Menu_ExportConfig}" FontSize="17" Foreground="Black" >
                    <MenuItem Header="{x:Static resx:GUI.MainForm_Menu_ExportDataStore}" Command="{Binding ExportDataStoreCommand}" CommandParameter="Full" FontSize="17" Foreground="Black"/>
                    <Separator/>
                    <MenuItem Header="{x:Static resx:GUI.MainForm_Menu_ExportLights}" Command="{Binding ExportDataStoreCommand}" CommandParameter="Lights" FontSize="17" Foreground="black"/>
                    <MenuItem Header="{x:Static resx:GUI.MainForm_Menu_ExportGroups}" Command="{Binding ExportDataStoreCommand}" CommandParameter="Groups" FontSize="17" Foreground="black"/>
                    <MenuItem Header="{x:Static resx:GUI.MainForm_Menu_ExportScenes}" Command="{Binding ExportDataStoreCommand}" CommandParameter="Scenes" FontSize="17" Foreground="black"/>
                    <MenuItem Header="{x:Static resx:GUI.MainForm_Menu_ExportSchedules}" Command="{Binding ExportDataStoreCommand}" CommandParameter="Schedules" FontSize="17" Foreground="black"/>
                    <MenuItem Header="{x:Static resx:GUI.MainForm_Menu_ExportRules}" Command="{Binding ExportDataStoreCommand}" CommandParameter="Rules" FontSize="17" Foreground="black"/>
                    <MenuItem Header="{x:Static resx:GUI.MainForm_Menu_ExportSensors}" Command="{Binding ExportDataStoreCommand}" CommandParameter="Sensors" FontSize="17" Foreground="black"/>
                    <MenuItem Header="{x:Static resx:GUI.MainForm_Menu_ExportResLink}" Command="{Binding ExportDataStoreCommand}" CommandParameter="ResourceLinks" FontSize="17" Foreground="black"/>
                </MenuItem>
                <Separator/>
                <MenuItem Header="{x:Static resx:GUI.MainForm_Menu_Quit}" Command="{Binding QuitApplicationCommand}" FontSize="17" Foreground="Black"/>
            </MenuItem>
            <MenuItem Header="{x:Static resx:GUI.Edit}" FontSize="17">
                <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Edit}" Command="{Binding EditObjectCommand}" Foreground="Black"/>
                <Separator/>
                <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Rename}" Command="{Binding RenameObjectCommand}" Foreground="Black"/>
                <Separator/>
                <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_ToggleDim}" Foreground="Black">
                    <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_ToggleDim_10}" Command="{Binding ToggleDim10Command}" Foreground="Black"/>
                    <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_ToggleDim_25}" Command="{Binding ToggleDim25Command}" Foreground="Black"/>
                    <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_ToggleDim_50}" Command="{Binding ToggleDim50Command}" Foreground="Black"/>
                    <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_ToggleDim_75}" Command="{Binding ToggleDim75Command}" Foreground="Black"/>
                </MenuItem>
                <Separator/>
                <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Identify}" Foreground="Black">
                    <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_None}" Command="{Binding IdentifyStopCommand}"/>
                    <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Long}" Command="{Binding IdentifyLongCommand}" />
                    <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Short}" Command="{Binding IdentifyShortCommand}"/>
                </MenuItem>
                <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Effects}" Foreground="Black">
                    <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Colorloop}" Command="{Binding ColorloopCommand}"/>
                    <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_None}" Command="{Binding NoEffectCommand}"/>
                </MenuItem>
                <!--<MenuItem Header="Strobe" Command="{Binding StrobeCommand}"/>-->
                <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Sensitivity}" Foreground="Black">
                    <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Sensitivity_High}" Command="{Binding SensitivityHighCommand}"/>
                    <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Sensitivity_Medium}" Command="{Binding SensitivityMediumCommand}"/>
                    <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Sensitivity_Low}" Command="{Binding SensitivityLowCommand}"/>
                </MenuItem>
                <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Clone}" Foreground="Black">
                    <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_QuickClone}" Command="{Binding QuickCloneCommand}"/>
                    <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Clone}" Command="{Binding CloneCommand}"/>
                </MenuItem>
                <Separator/>
                <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Copy}" Foreground="Black">
                    <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_CopyToJsonRaw}" Command="{Binding CopyToJsonRawCommand}"/>
                    <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_CopyToJson}" Command="{Binding CopyToJsonCommand}"/>
                </MenuItem>
                <Separator/>
                <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_ReplaceLightsState}" Command="{Binding ReplaceCurrentStateCommand}" Foreground="Black"/>
                <Separator/>
                <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Sensor}" Foreground="Black">
                    <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Sensor_SetFlag}" IsCheckable="True">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Checked">
                                <i:InvokeCommandAction Command="{Binding SetSensorFlagCommand}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </MenuItem>
                    <MenuItem >
                        <MenuItem.Header>
                            <WrapPanel>
                                <Label Content="{x:Static resx:GUI.MainForm_ListView_Context_Sensor_SetStatus}" Padding="0,5,5,5"/>
                                <xctk:IntegerUpDown Minimum="0" Maximum="65518" Width="78" />
                            </WrapPanel>
                        </MenuItem.Header>
                    </MenuItem>
                </MenuItem>
                <Separator/>
                <MenuItem Header="{x:Static resx:GUI.Button_Delete}" Command="{Binding DeleteObjectCommand}" Foreground="Black" Background="Red"/>
            </MenuItem>
            <MenuItem Header="{x:Static resx:GUI.MainForm_Tab_Tools}" FontSize="17">
                <MenuItem Header="{x:Static resx:GUI.MainForm_ToolsTab_CpuTempMon}" CommandParameter="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Command="{Binding CpuTempMonCommand}" Foreground="Black">
                    <MenuItem.Icon>
                        <Image Source="/WinHue3;component/Resources/cputemp.png" Height="16"/>
                    </MenuItem.Icon>
                    <MenuItem Header="{x:Static resx:GUI.MainForm_ToolsTab_Settings}" Command="{Binding CpuTempMonSettingsCommand}"/>
                </MenuItem>
            </MenuItem>
            <MenuItem Header="{x:Static resx:GUI.MainForm_Tab_View}" FontSize="17">
                <MenuItem Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Refresh}" Command="{Binding RefreshViewCommand}" Foreground="Black"/>
                <Separator/>
                <MenuItem Header="{x:Static resx:GUI.MainForm_Tab_View_SceneMapping}" Command="{Binding ViewSceneMappingCommand}" Foreground="Black">
                    <MenuItem.Icon>
                        <Image Source="/WinHue3;component/Resources/SceneMapping.png" Height="16"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="{x:Static resx:GUI.MainForm_Tab_View_BulbsView}" Command="{Binding ViewBulbsCommand}" Foreground="Black">
                    <MenuItem.Icon>
                        <Image Source="/WinHue3;component/Resources/BulbView.png" Height="16"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="{x:Static resx:GUI.MainForm_Tab_View_GroupsView}" Command="{Binding ViewGroupsCommand}" Foreground="Black">
                    <MenuItem.Icon>
                        <Image Source="/WinHue3;component/Resources/GroupView.png" Height="16"/>
                    </MenuItem.Icon>
                </MenuItem>
                <Separator/>
                <MenuItem Header="{x:Static resx:GUI.MainForm_Tab_View_Toolbars}" Foreground="Black">
                    <MenuItem IsCheckable="True" x:Name="mnuSearch" Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Search}" IsChecked="True"/>
                    <MenuItem IsCheckable="True" x:Name="mnuCommands" Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Commands}" IsChecked="True"/>
                    <MenuItem IsCheckable="True" x:Name="mnuRefresh" Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Refresh}" IsChecked="True"/>
                    <MenuItem IsCheckable="True" x:Name="mnuCreators" Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators}" IsChecked="True"/>
                    <MenuItem IsCheckable="True" x:Name="mnuSettings" Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Settings}" IsChecked="True"/>
                    <MenuItem IsCheckable="True" x:Name="mnuEvents" Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Events}" IsChecked="True"/>
                    <MenuItem IsCheckable="True" x:Name="mnuSensorOp" Header="{x:Static resx:GUI.Sensors}" IsChecked="false"/>
                </MenuItem>
                <Separator/>
                <MenuItem Header="{x:Static resx:GUI.MainForm_Tab_View_PropertyGrid}" Foreground="Black" Command="{Binding ShowPropertyGridCommand}"/>
                <Separator/>
                <MenuItem IsCheckable="True" IsChecked="True" x:Name="mnuFloorPlan" Header="{x:Static resx:GUI.MainForm_Tab_View_FloorPlan}" Foreground="Black"/>

            </MenuItem>
            <MenuItem Header="{x:Static resx:GUI.MainForm_Tab_Help}" FontSize="17">
                <MenuItem Header="{x:Static resx:GUI.MainForm_Tab_Help_Website}" Command="{Binding OpenWinHueWebsiteCommand}" Foreground="Black" >
                    <MenuItem.Icon>
                        <Image Source="/WinHue3;component/Resources/WebSite.png" Height="16"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="{x:Static resx:GUI.MainForm_Tab_Help_Forum}" Command="{Binding OpenWinHueSupportCommand}" Foreground="Black">
                    <MenuItem.Icon>
                        <Image Source="/WinHue3;component/Resources/Help.png" Height="16"/>
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>
        </Menu>
        <ToolBarTray DockPanel.Dock="Top" Height="45" VerticalAlignment="Top" IsLocked="True" Background="{StaticResource HeaderBackgroundBrush}">
            <ToolBar Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Search}" Visibility="{Binding IsChecked, Converter={StaticResource BoolToVisibilityConverter}, ElementName=mnuSearch}" >
                <Separator/>
                <Button ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Group_SearchLight}" Command="{Binding SearchNewLightsCommand}">
                    <Image Source="/WinHue3;component/Resources/HueLightSearch.png" Height="32" Style="{StaticResource ImageEnabled}"/>
                </Button>
                <Button ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Touchlink}" Command="{Binding TouchLinkCommand}">
                    <Image Source="/WinHue3;component/Resources/touchlink.png" Height="32" Style="{StaticResource ImageEnabled}"/>
                </Button>
                <Button ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_FindSerial}" Command="{Binding FindLightSerialCommand}" >
                    <Image Source="/WinHue3;component/Resources/findserial.png" Height="32" Style="{StaticResource ImageEnabled}"/>
                </Button>
                <Button ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Group_SearchSensor}" Command="{Binding SearchNewSensorsCommand}">
                    <Image Source="/WinHue3;component/Resources/SensorSearch.png" Height="32" Style="{StaticResource ImageEnabled}"/>
                </Button>
            </ToolBar>
            <ToolBar Header="{x:Static resx:GUI.MainForm_ListView_Context_Sensor}" Visibility="{Binding IsChecked, Converter={StaticResource BoolToVisibilityConverter}, ElementName=mnuSensorOp}">
                <Separator/>
                <WrapPanel>
                    <Label Content="{x:Static resx:GUI.MainForm_ListView_Context_Sensor_SetStatus}" Height="24" VerticalContentAlignment="Center" Padding="2,2,5,5"/>
                    <xctk:IntegerUpDown Height="24" Padding="5,0,0,0" Minimum="0" Maximum="65535" Margin="0,7,0,7.667" Width="79" Value="{Binding SensorStatus}" IsEnabled="{Binding IsEnabled, ElementName=btnSetStatus}"/>
                    <Button x:Name="btnSetStatus" BorderBrush="{x:Null}" Background="{x:Null}" Command="{Binding SetSensorStatusCommand}" >
                        <Image Source="/WinHue3;component/Resources/1464410361_check.png" Height="24"/>
                    </Button>
                </WrapPanel>
                <Separator/>
                <WrapPanel>
                    <Label Content="{x:Static resx:GUI.MainForm_ListView_Context_Sensor_SetFlag}" Height="26" VerticalContentAlignment="Center" Padding="5" Margin="0,5,0,0"/>
                    <CheckBox Margin="2,12,5,5" IsChecked="{Binding SensorFlag}" Command="{Binding SetSensorFlagCommand}" />
                </WrapPanel>

            </ToolBar>
            <ToolBar Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Commands}" Visibility="{Binding IsChecked, Converter={StaticResource BoolToVisibilityConverter}, ElementName=mnuCommands}" Padding="0,0,12,0">
                <Separator/>
                <Button ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Group_CommandsAllON}" Command="{Binding AllOnCommand}">
                    <Image Source="/WinHue3;component/Resources/HueGroupOn.png" Height="32" Style="{StaticResource ImageEnabled}"/>
                </Button>
                <Button ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Group_CommandsAllOFF}" Command="{Binding AllOffCommand}">
                    <Image Source="/WinHue3;component/Resources/HueGroupOff.png" Height="32" Style="{StaticResource ImageEnabled}"/>
                </Button>
                <ToggleButton Style="{StaticResource AnimatedSwitch}" behaviors:OnClickBehavior.Command="{Binding DoubleClickObjectCommand}" ToolTip="On/Off" Padding="2" Margin="6,0,4,0" IsChecked="{Binding MainFormModel.On}"/>
            </ToolBar>
            <ToolBar Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Refresh}" Visibility="{Binding IsChecked, Converter={StaticResource BoolToVisibilityConverter}, ElementName=mnuRefresh}">
                <Separator/>
                <Button ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Group_RefreshButton}" Command="{Binding RefreshViewCommand}">
                    <Image Source="/WinHue3;component/Resources/refreshMetro5.ico" Height="32" Style="{StaticResource ImageEnabled}"/>
                </Button>
            </ToolBar>
            <ToolBar Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators}" Visibility="{Binding IsChecked, Converter={StaticResource BoolToVisibilityConverter}, ElementName=mnuCreators}">
                <Button ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_CreateGroup}" Command="{Binding CreateGroupCommand}">
                    <Image Source="/WinHue3;component/Resources/HueGroupOn-Large.png" Height="32" Style="{StaticResource ImageEnabled}"/>
                </Button>
                <Button ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_CreateScene}" Command="{Binding CreateSceneCommand}" >
                    <Image Source="/WinHue3;component/Resources/scenes.png" Height="32" Style="{StaticResource ImageEnabled}"/>
                </Button>
                <Button ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_CreateSchedule}" Command="{Binding CreateScheduleCommand}" >
                    <Image Source="/WinHue3;component/Resources/SchedulesLarge.png" Height="32" Style="{StaticResource ImageEnabled}"/>
                </Button>
                <Button ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_CreateRule}" Command="{Binding CreateRuleCommand}">
                    <Image Source="/WinHue3;component/Resources/rules.png" Height="32" Style="{StaticResource ImageEnabled}"/>
                </Button>
                <Button ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_CreateSensor}"  Command="{Binding CreateSensorCommand}" >
                    <Image Source="/WinHue3;component/Resources/sensor.png" Height="32" Style="{StaticResource ImageEnabled}"/>
                </Button>
                <!--<Button x:Name="btnCreateAnimation" ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_CreateAnimation}" Command="{Binding CreateAnimationCommand}">
                    <Image Source="/WinHue3;component/Resources/animation.png" Height="32" Style="{StaticResource ImageEnabled}"/>
                </Button>-->
                <Button ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_CreateHotkey}" Command="{Binding CreateHotKeyCommand}">
                    <Image Source="/WinHue3;component/Resources/hotkeys.png" Height="32" Style="{StaticResource ImageEnabled}"/>
                </Button>
                <Button ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_ResourceLink}"  Command="{Binding CreateResourceLinkCommand}">
                    <Image Source="/WinHue3;component/Resources/resource.png" Height="32" Style="{StaticResource ImageEnabled}"/>
                </Button>
                <!--<Button ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_EntertainmentCreator}"  Command="{Binding CreateEntertainmentCommand}" >
                    <Image Source="/WinHue3;component/Resources/entertainment.png" Height="32" Style="{StaticResource ImageEnabled}"/>
                </Button>-->
                <Button ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_AdvancedCreator}"  Command="{Binding CreateAdvancedCommand}" >
                    <Image Source="/WinHue3;component/Resources/advanced.png" Height="32" Style="{StaticResource ImageEnabled}"/>
                </Button>
                <Button ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_FloorCreator}"  Command="{Binding CreateFloorPlanCommand}" >
                    <Image Source="/WinHue3;component/Resources/floorplan.png" Height="32" Style="{StaticResource ImageEnabled}"/>
                </Button>


            </ToolBar>
            <ToolBar Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Settings}" Visibility="{Binding IsChecked, Converter={StaticResource BoolToVisibilityConverter}, ElementName=mnuSettings}">
                <Separator/>
                <Button ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Group_SettingsButton}" Command="{Binding ChangeBridgeSettingsCommand}" >
                    <Image Source="/WinHue3;component/Resources/settingsMetro.ico" Height="32" Style="{StaticResource ImageEnabled}"/>
                </Button>
                <!--<SplitButton ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Group_SettingsUpdateButton_CheckForUpdate}" Icon="" LargeIcon="/WinHue3;component/Resources/UpdateSearch.png" Command="{Binding CheckForUpdateCommand}" ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Group_SettingsUpdateButton_CheckForUpdate}" SizeDefinition="Large,Middle,Small">
                    <fluent:Button Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_SettingsUpdateButton}" Icon="/WinHue3;component/Resources/update.png" Command="{Binding UpdateBridgeCommand}"/>
                </SplitButton>-->
                <Button ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Group_SettingsUsers}" Command="{Binding ManageUsersCommand}">
                    <Image Source="/WinHue3;component/Resources/user.png" Height="32" Style="{StaticResource ImageEnabled}"/>
                </Button>
                <Button ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Group_SettingsResetTT}" Command="{Binding ResetTransitionTimeCommand}">
                    <Image Source="/WinHue3;component/Resources/resettt.png" Height="32" Style="{StaticResource ImageEnabled}"/>
                </Button>
                <Button ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Group_PowerSettings}" Command="{Binding SetPowerModeCommand}">
                    <Image Height="32" Style="{StaticResource ImageEnabled}" Source="/WinHue3;component/Resources/powerfailure.png"/>
                </Button>
            </ToolBar>
            <ToolBar Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Events}" Visibility="{Binding IsChecked, Converter={StaticResource BoolToVisibilityConverter}, ElementName=mnuEvents}">
                <Separator/>
                <Button ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Group_EventsLogButton}" Command="{Binding ShowEventLogCommand}">
                    <Image Source="/WinHue3;component/Resources/eventlog.png" Height="32" Style="{StaticResource ImageEnabled}"/>
                </Button>
            </ToolBar>
        </ToolBarTray>
        <StatusBar DockPanel.Dock="Bottom" x:Name="SbStatusBar" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch" Height="27" VerticalAlignment="Bottom">
            <StatusBar.ItemsPanel>
                <ItemsPanelTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="350"/>
                        </Grid.ColumnDefinitions>
                    </Grid>
                </ItemsPanelTemplate>
            </StatusBar.ItemsPanel>
            <StatusBarItem Grid.Column="1" HorizontalContentAlignment="Stretch" BorderThickness="1" >
                <TextBlock  x:Name="LblSbMessage" Text="{Binding Lastmessage}" HorizontalAlignment="Stretch"/>
            </StatusBarItem>
            <StatusBarItem Grid.Column="2" BorderThickness="1" Margin="0" Padding="1">
                <Grid Height="22" Width="345">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="20"/>
                        <ColumnDefinition Width="3"/>
                        <ColumnDefinition Width="20"/>
                        <ColumnDefinition Width="3"/>
                        <ColumnDefinition Width="20"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Border Width="19" Height="19" Grid.Column="0" ToolTip="{x:Static resx:GUI.MainForm_StatusBar_ToolTip_HotKey}" CornerRadius="10">
                        <Border.Style>
                            <Style TargetType="{x:Type Border}">
                                <Setter Property="Background" Value="Red"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding HotkeyDetected}" Value="True">
                                        <Setter Property="Background" Value="Green"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                    </Border>

                    <Image Width="19" Height="19" Grid.Column="2" ToolTip="{x:Static resx:GUI.MainForm_StatusBar_ToolTip_Search}">
                        <Image.Style>
                            <Style TargetType="{x:Type Image}">
                                <Setter Property="Source" Value="{x:Null}" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding SearchingLights}" Value="True">
                                        <Setter Property="Source" Value="/WinHue3;component/Resources/magnifier.png"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Image.Style>
                    </Image>

                    <Image Width="19" Height="19" Grid.Column="4" ToolTip="{x:Static resx:GUI.MainForm_StatusBar_ToolTip_UpdateAvailable}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseUp">
                                <i:InvokeCommandAction Command="{Binding DoAppUpdateCommand}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <Image.Style>
                            <Style TargetType="{x:Type Image}">
                                <Setter Property="Source" Value="{x:Null}" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding AppUpdateAvailable}" Value="True">
                                        <Setter Property="Source" Value="/WinHue3;component/Resources/UpdateSearch.png"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Image.Style>
                    </Image>
                    <ComboBox Grid.Column="5" x:Name="CbListBridge" ItemsSource="{Binding ListBridges}" DisplayMemberPath="LongName" SelectedItem="{Binding SelectedBridge}" HorizontalAlignment="Left"  VerticalAlignment="Top" Width="200" Height="22" BorderThickness="0" Padding="0" behaviors:CommandBehavior.Command="{Binding ChangeBridgeCommand}" behaviors:CommandBehavior.RoutedEventName="SelectionChanged">
                        <ComboBox.Style>
                            <Style TargetType="{x:Type ComboBox}">
                                <Setter Property="Visibility" Value="Visible"/>
                                <Setter Property="Background" Value="Transparent"/>
                                <Setter Property="BorderBrush" Value="Transparent"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding MultiBridgeCB}" Value="False">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ComboBox.Style>
                    </ComboBox>
                </Grid>
            </StatusBarItem>
        </StatusBar>
        <tb:TaskbarIcon x:Name="Trayicon" ToolTipText="WinHue 3" TrayMouseDoubleClick="Trayicon_TrayMouseDoubleClick" Width="0" Height="0" >
            <!--<tb:TaskbarIcon.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Lights" x:Name="mnuLights"/>
                        <MenuItem Header="Groups" x:Name="mnuGroups"/>
                        <MenuItem Header="Scenes" x:Name="mnuScenes"/>
                    </ContextMenu>
                </tb:TaskbarIcon.ContextMenu>-->

        </tb:TaskbarIcon>
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="350"/>
            </Grid.ColumnDefinitions>
            <TextBlock Text="{x:Static resx:GUI.BridgeUpdateRequired}" FontSize="40" Margin="5,181,9.667,0"  Height="198" VerticalAlignment="Top" TextWrapping="Wrap" HorizontalAlignment="Center" Foreground="#FF7D7D7D" Grid.Column="0">
                <TextBlock.Style>
                    <Style TargetType="{x:Type TextBlock}">
                        <Setter Property="Visibility" Value="Hidden"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding EnableListView}" Value="False">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBlock.Style>
            </TextBlock>
            <StackPanel Grid.Column="1" HorizontalAlignment="Stretch" Height="auto" VerticalAlignment="Top">
                <Label Content="{x:Static resx:GUI.MainForm_Sliders_HueColor}" HorizontalAlignment="Center" Width="350" HorizontalContentAlignment="Center" IsEnabled="{Binding IsEnabled, ElementName=SlHue}" Foreground="White" Background="{DynamicResource HeaderBackgroundBrush}" />
                <WrapPanel Margin="10" VerticalAlignment="Top">
                    <sliders:BindableHueSlider  x:Name="SlHue" Height="23" VerticalAlignment="Top" Width="257" Value="{Binding MainFormModel.SliderHue}" IsSnapToTickEnabled="True" AutoToolTipPlacement="TopLeft" ToolTip="{Binding Value, ElementName=SlHue}" IsMoveToPointEnabled="True" Command="{Binding SliderHueChangedCommand}" Maximum="65535" OldValue="{Binding MainFormModel.OldSliderHue, Mode=OneWayToSource}" SmallChange="1" LargeChange="100">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewKeyUp">
                                <behaviors:InvokeDelegateCommandAction Command="{Binding HueKeyPressCommand}" CommandParameter="{Binding InvokeParameter, RelativeSource={RelativeSource Self}}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <sliders:BindableHueSlider.Background>
                            <LinearGradientBrush StartPoint="0,0.5" EndPoint="1.0,0.5" >
                                <GradientStop Color="#FFFF0000" />
                                <GradientStop Color="#FEFFFF00" Offset="0.195" />
                                <GradientStop Color="#FE00FF00" Offset="0.389" />
                                <GradientStop Color="#FE00FFFF" Offset="0.5"   />
                                <GradientStop Color="#FE0000FF" Offset="0.715" />
                                <GradientStop Color="#FEFF00FF" Offset="0.856" />
                                <GradientStop Color="#FFFF0000" Offset="1.0"   />
                            </LinearGradientBrush>
                        </sliders:BindableHueSlider.Background>
                    </sliders:BindableHueSlider>
                    <xctk:ShortUpDown HorizontalAlignment="Left" Height="23" VerticalAlignment="Top" Width="66" Margin="5,0,0,0" IsEnabled="{Binding IsEnabled, ElementName=SlHue}" Value="{Binding MainFormModel.SliderHue}" behaviors:CommandBehavior.Command="{Binding SliderHueChangedCommand}" behaviors:CommandBehavior.RoutedEventName="EnterPressed" ToolTip="{x:Static resx:GUI.EnterPressedTooltip}"/>
                </WrapPanel>

                <Label Content="{x:Static resx:GUI.MainForm_Sliders_Brightness}" HorizontalAlignment="Center" Width="350" HorizontalContentAlignment="Center" IsEnabled="{Binding IsEnabled, ElementName=SlBri}" Foreground="White" Background="{DynamicResource HeaderBackgroundBrush}"/>
                <WrapPanel Margin="10" VerticalAlignment="Top">
                    <sliders:BindableSlider x:Name="SlBri" Height="23" VerticalAlignment="Top" Maximum="255" Minimum="0"  Width="257" Value="{Binding MainFormModel.SliderBri}"  SmallChange="1" AutoToolTipPlacement="TopLeft" ToolTip="{Binding Value, ElementName=SlBri}" IsMoveToPointEnabled="True" Command="{Binding SliderBriChangedCommand}" OldValue="{Binding MainFormModel.OldSliderBri, Mode=OneWayToSource}" Style="{StaticResource {x:Type Slider}}" LargeChange="3">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewKeyUp">
                                <behaviors:InvokeDelegateCommandAction Command="{Binding BriKeyPressCommand}" CommandParameter="{Binding InvokeParameter, RelativeSource={RelativeSource Self}}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <sliders:BindableSlider.Background>
                            <LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5">
                                <GradientStop Color="White" Offset="1"/>
                                <GradientStop Color="Black" Offset="0"/>
                            </LinearGradientBrush>
                        </sliders:BindableSlider.Background>
                    </sliders:BindableSlider>
                    <xctk:ByteUpDown Height="23" Width="66" Margin="5,0,0,0" Value="{Binding MainFormModel.SliderBri}" IsEnabled="{Binding IsEnabled, ElementName=SlBri}" behaviors:CommandBehavior.RoutedEventName="EnterPressed" behaviors:CommandBehavior.Command="{Binding SliderBriChangedCommand}" ToolTip="{x:Static resx:GUI.EnterPressedTooltip}" />
                </WrapPanel>
                <Label Content="{x:Static resx:GUI.MainForm_Sliders_Saturation}" HorizontalAlignment="Center" Width="350" HorizontalContentAlignment="Center" IsEnabled="{Binding IsEnabled, ElementName=SlSat}" Foreground="White" Background="{DynamicResource HeaderBackgroundBrush}"/>
                <WrapPanel Margin="10" VerticalAlignment="Top">
                    <sliders:BindableSlider x:Name="SlSat" Height="23" VerticalAlignment="Top" Maximum="255" Minimum="0" IsSnapToTickEnabled="True" SmallChange="1" Value="{Binding MainFormModel.SliderSat}"  AutoToolTipPlacement="TopLeft" ToolTip="{Binding Value, ElementName=SlSat}" IsMoveToPointEnabled="True" Command="{Binding SliderSatChangedCommand}" OldValue="{Binding MainFormModel.OldSliderSat, Mode=OneWayToSource}" Style="{StaticResource {x:Type Slider}}" LargeChange="3" Width="257">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewKeyUp">
                                <behaviors:InvokeDelegateCommandAction Command="{Binding SatKeyPressCommand}" CommandParameter="{Binding InvokeParameter, RelativeSource={RelativeSource Self}}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <sliders:BindableSlider.Background>
                            <LinearGradientBrush>
                                <GradientStop Color="White" x:Name="SlSatStartGradient"/>
                                <GradientStop Color="{Binding Hue, ElementName=SlHue}" Offset="1" x:Name="SlSatEndGradient"/>
                            </LinearGradientBrush>
                        </sliders:BindableSlider.Background>
                    </sliders:BindableSlider>
                    <xctk:ByteUpDown Value="{Binding MainFormModel.SliderSat}" IsEnabled="{Binding IsEnabled, ElementName=SlSat}" Height="23" Width="66" Margin="5,0,0,0" behaviors:CommandBehavior.Command="{Binding SliderSatChangedCommand}" behaviors:CommandBehavior.RoutedEventName="EnterPressed" ToolTip="{x:Static resx:GUI.EnterPressedTooltip}" />
                </WrapPanel>
                <Label Content="{x:Static resx:GUI.MainForm_Sliders_ColorTemp}" HorizontalAlignment="Center"  Width="350" HorizontalContentAlignment="Center" IsEnabled="{Binding IsEnabled, ElementName=SlCt}" Foreground="White" Background="{DynamicResource HeaderBackgroundBrush}"/>
                <WrapPanel Margin="10" VerticalAlignment="Top">
                    <sliders:BindableSlider x:Name="SlCt" Height="23" VerticalAlignment="Top" Maximum="500" Width="257" Minimum="153" IsSnapToTickEnabled="True" Value="{Binding MainFormModel.SliderCt}"  SmallChange="1"  AutoToolTipPlacement="TopLeft" ToolTip="{Binding Value, ElementName=SlCt}" IsMoveToPointEnabled="True" Command="{Binding SliderCtChangedCommand}" OldValue="{Binding MainFormModel.OldSliderCt, Mode=OneWayToSource}" Style="{StaticResource {x:Type Slider}}" LargeChange="3">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewKeyUp">
                                <behaviors:InvokeDelegateCommandAction Command="{Binding CtKeyPressCommand}" CommandParameter="{Binding InvokeParameter, RelativeSource={RelativeSource Self}}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <sliders:BindableSlider.Background>
                            <LinearGradientBrush EndPoint="0,0.5" StartPoint="1,0.5">
                                <GradientStop Color="#FFFF8912" Offset="0"/>
                                <GradientStop Color="#FFFFF9FD" Offset="1"/>
                            </LinearGradientBrush>
                        </sliders:BindableSlider.Background>
                    </sliders:BindableSlider>
                    <xctk:ShortUpDown Height="23" Width="66" IsEnabled="{Binding IsEnabled, ElementName=SlCt}" Value="{Binding MainFormModel.SliderCt}" Margin="5,0,0,0" behaviors:CommandBehavior.RoutedEventName="EnterPressed" behaviors:CommandBehavior.Command="{Binding SliderCtChangedCommand}" ToolTip="{x:Static resx:GUI.EnterPressedTooltip}" Minimum="153" Maximum="500"/>

                </WrapPanel>

                <WrapPanel Margin="10">
                    <!--<controls:WinHueXYUpDown Value="{Binding ElementName=SlY, Path=Value}" IsEnabled="{Binding ElementName=SlY, Path=IsEnabled}" Height="23" Width="66" Margin="5,0,0,5" behaviors:CommandBehavior.RoutedEventName="EnterPressed" behaviors:CommandBehavior.Command="{Binding SliderXyChangedCommand}"/>-->
                    <Label Content="{x:Static resx:GUI.MoodCreatorForm_XYColorSpace}" HorizontalAlignment="Center" Margin="5,0,0,0"  Width="350" HorizontalContentAlignment="Center" IsEnabled="{Binding IsEnabled, ElementName=SlCt}" Foreground="White" Background="{DynamicResource HeaderBackgroundBrush}">
                        <Label.Style>
                            <Style TargetType="{x:Type Label}">
                                <Setter Property="Visibility" Value="Visible"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding SelectedValue, ElementName=TabType}" Value="tiLIFX">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>

                                </Style.Triggers>
                            </Style>
                        </Label.Style>
                    </Label>
                    <sliders:BindableSlider x:Name="SlX" Maximum="1.000" Minimum="0.000" Height="23" Width="257" Value="{Binding MainFormModel.SliderX}" OldValue="{Binding MainFormModel.OldSliderX}" Margin="0,0,0,5" Command="{Binding SliderXyChangedCommand}" LargeChange="0.1" SmallChange="0.001"/>

                    <!--<controls:WinHueXYUpDown Value="{Binding ElementName=SlX, Path=Value}" IsEnabled="{Binding ElementName=SlX, Path=IsEnabled}" Height="23" Width="66" Margin="5,0,0,5" behaviors:CommandBehavior.RoutedEventName="EnterPressed" behaviors:CommandBehavior.Command="{Binding SliderXyChangedCommand}"/>-->
                    <sliders:BindableSlider x:Name="SlY" Maximum="1.000" Minimum="0.000" Height="23" Width="257" Value="{Binding MainFormModel.SliderY}" OldValue="{Binding MainFormModel.OldSliderY}" Margin="0,0,0,5" Command="{Binding SliderXyChangedCommand}" LargeChange="0.1" SmallChange="0.001"/>

                </WrapPanel>
                <Label x:Name="LblTt" Content="{Binding TransitionTimeTooltip, Mode=OneWay}" HorizontalAlignment="Center" Width="350" HorizontalContentAlignment="Center" IsEnabled="{Binding IsEnabled, ElementName=SlTt}" Foreground="White" Background="{DynamicResource HeaderBackgroundBrush}" />
                <WrapPanel Margin="10" VerticalAlignment="Top" HorizontalAlignment="Center">
                    <controls:WinHueTransitionTimeUpDown Value="{Binding SliderTt}" IsEnabled="{Binding CanTT}" Height="21" Width="136" ToolTip="{x:Static resx:GUI.TransitionTimeToolTip}" />
                </WrapPanel>


            </StackPanel>
            <TabControl Padding="0">
                <TabItem Header="{x:Static resx:GUI.AllObjects}">
                    <Grid>
                        <ListView x:Name="LvMainObjects"  
                                ScrollViewer.HorizontalScrollBarVisibility="Disabled" 
                                SelectedItem="{Binding SelectedHueObject}" 
                                SelectionChanged="LvMainObjects_SelectionChanged" 
                                SelectionMode="Single" 
                                VerticalContentAlignment="Stretch" Grid.Column="0" 
                                IsEnabled="{Binding EnableListView}" 
                                behaviors:OnClickBehavior.Command="{Binding ClickObjectCommand}" 
                                behaviors:OnClickBehavior.IgnoreClick_CanExecute="true"
                                behaviors:OnDoubleClickBehavior.Command="{Binding DoubleClickObjectCommand}" 
                                behaviors:OnDoubleClickBehavior.IgnoreDblClick_CanExecute="True"
                                behaviors:KeyUpBehavior.Command="{Binding DeleteObjectCommand}"
                                ItemsSource="{Binding ListBridgeObjects}">

                            <ListView.Resources>
                                <DataTemplate x:Key="HueIcon" DataType="common:IHueObject">
                                    <WrapPanel Orientation="Vertical" Margin="5,5,5,5" SnapsToDevicePixels="True" VerticalAlignment="Top" HorizontalAlignment="Center">
                                        <Image Height="48" Width="48" Source="{Binding Image}" SnapsToDevicePixels="True" RenderOptions.EdgeMode="Aliased" RenderOptions.BitmapScalingMode="HighQuality"/>
                                        <TextBlock x:Name="tblName" Text="{Binding name}" Style="{StaticResource TbWrap}" HorizontalAlignment="Center" TextAlignment="Center" FontWeight="Bold"/>
                                        <TextBlock  x:Name="tblShowId" Text="{Binding Id}" TextAlignment="Center" FontStyle="Italic">
                                            <TextBlock.Style>
                                                <Style BasedOn="{StaticResource TbWrap}" TargetType="{x:Type TextBlock}">
                                                    <Setter Property="Visibility" Value="Collapsed"/>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding DataContext.MainFormModel.ShowId, ElementName=MainForm}" Value="True">
                                                            <Setter Property="Visibility" Value="Visible"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </TextBlock.Style>
                                        </TextBlock>
                                    </WrapPanel>
                                </DataTemplate>
                                <Style TargetType="{x:Type ListViewItem}">
                                    <Style.Resources>
                                        <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Red"/>
                                    </Style.Resources>
                                    <Style.Triggers>
                                        <EventTrigger RoutedEvent="Control.MouseDoubleClick">
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <ColorAnimation Storyboard.TargetProperty="(SolidColorBrush.Color)" To="Red" Duration="0:0:.3" AutoReverse="True"/>
                                                    <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:.3" AutoReverse="True"/>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </EventTrigger>
                                    </Style.Triggers>
                                </Style>

                                <DataTemplate DataType="{x:Type lightObject:Light}" >
                                    <WrapPanel Orientation="Vertical" Margin="5,5,5,5" SnapsToDevicePixels="True" VerticalAlignment="Top" HorizontalAlignment="Center">
                                        <ContentPresenter ContentTemplate="{DynamicResource HueIcon}" />
                                    </WrapPanel>
                                </DataTemplate>
                                <DataTemplate DataType="{x:Type groupObject:Group}" >
                                    <WrapPanel Orientation="Vertical" Margin="5,5,5,5" SnapsToDevicePixels="True" VerticalAlignment="Top" HorizontalAlignment="Center">
                                        <ContentPresenter ContentTemplate="{DynamicResource HueIcon}" />
                                    </WrapPanel>
                                </DataTemplate>
                                <DataTemplate DataType="{x:Type ruleObject:Rule}" >
                                    <WrapPanel Orientation="Vertical" Margin="5,5,5,5" SnapsToDevicePixels="True" VerticalAlignment="Top" HorizontalAlignment="Center">
                                        <ContentPresenter ContentTemplate="{DynamicResource HueIcon}" />
                                    </WrapPanel>
                                </DataTemplate>
                                <DataTemplate DataType="{x:Type newSensorsObject:Sensor}" >
                                    <WrapPanel Orientation="Vertical" Margin="5,5,5,5" SnapsToDevicePixels="True" VerticalAlignment="Top" HorizontalAlignment="Center">
                                        <ContentPresenter ContentTemplate="{DynamicResource HueIcon}" />
                                    </WrapPanel>
                                </DataTemplate>
                                <DataTemplate DataType="{x:Type scheduleObject:Schedule}" >
                                    <WrapPanel Orientation="Vertical" Margin="5,5,5,5" SnapsToDevicePixels="True" VerticalAlignment="Top" HorizontalAlignment="Center">
                                        <ContentPresenter ContentTemplate="{DynamicResource HueIcon}" />
                                    </WrapPanel>
                                </DataTemplate>
                                <DataTemplate DataType="{x:Type resourcelinkObject:Resourcelink}" >
                                    <WrapPanel Orientation="Vertical" Margin="5,5,5,5" SnapsToDevicePixels="True" VerticalAlignment="Top" HorizontalAlignment="Center">
                                        <ContentPresenter ContentTemplate="{DynamicResource HueIcon}" />
                                    </WrapPanel>
                                </DataTemplate>
                                <DataTemplate DataType="{x:Type sceneObject:Scene}" >
                                    <WrapPanel Orientation="Vertical" Margin="5,5,5,5" SnapsToDevicePixels="True" VerticalAlignment="Top" HorizontalAlignment="Center">
                                        <ContentPresenter ContentTemplate="{DynamicResource HueIcon}" />
                                    </WrapPanel>
                                </DataTemplate>

                            </ListView.Resources>
                            <ListView.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <WrapPanel Orientation="Horizontal" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Auto" Margin="5,5,5,5"/>
                                </ItemsPanelTemplate>
                            </ListView.ItemsPanel>
                            <ListView.ItemContainerStyle>
                                <Style TargetType="{x:Type ListViewItem}" />
                            </ListView.ItemContainerStyle>
                            <ListView.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Edit}" Command="{Binding EditObjectCommand}"/>
                                    <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Rename}" Command="{Binding RenameObjectCommand}"/>
                                    <Separator/>
                                    <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Copy}">
                                        <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_CopyToJson}" Command="{Binding CopyToJsonCommand}"/>
                                        <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_CopyToJsonRaw}" Command="{Binding CopyToJsonRawCommand}"/>
                                    </MenuItem>
                                    <Separator/>
                                    <MenuItem Header="{x:Static resx:GUI.Button_Delete}" Command="{Binding DeleteObjectCommand}" Background="Red"/>
                                </ContextMenu>
                            </ListView.ContextMenu>
                            <ListView.GroupStyle>
                                <GroupStyle>
                                    <GroupStyle.ContainerStyle>
                                        <Style TargetType="{x:Type GroupItem}">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate>
                                                        <Expander IsExpanded="True">
                                                            <Expander.Header >
                                                                <Grid Width="Auto" HorizontalAlignment="{Binding HorizontalAlignment, Mode=OneWayToSource, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}}" Background="{StaticResource HeaderBackgroundBrush}">
                                                                    <TextBlock Text="{Binding Name}" FontWeight="Bold" FontSize="14" FontStyle="Italic" Foreground="White" Padding="3"/>
                                                                </Grid>
                                                            </Expander.Header>
                                                            <ItemsPresenter />
                                                        </Expander>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </GroupStyle.ContainerStyle>
                                </GroupStyle>
                            </ListView.GroupStyle>
                        </ListView>
                    </Grid>
                </TabItem>
                <TabItem Visibility="{Binding IsChecked, Converter={StaticResource BoolToVisibilityConverter}, ElementName=mnuFloorPlan}" Padding="0" >
                    <TabItem.Header>
                        <WrapPanel Margin="0">
                            <Label Content="{x:Static resx:GUI.FloorPlan}" Margin="6,2,0,2"/>
                            <ComboBox Width="200" ItemsSource="{Binding ListFloorPlans}" DisplayMemberPath="Name" SelectedItem="{Binding SelectedFloorPlan}" Margin="0,3,3,2">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="SelectionChanged">
                                        <i:InvokeCommandAction Command="{Binding SelectedFloorPlanChangedCommand}"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </ComboBox>

                        </WrapPanel>

                    </TabItem.Header>
                    <Grid Background="#FFE5E5E5">
                        <ScrollViewer CanContentScroll="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" Background="#FF5F5F5F">
                            <ListBox x:Name="DragDropMap" SelectedItem="{Binding SelectedHueElement}" ItemsSource="{Binding SelectedFloorPlan.Elements, FallbackValue={x:Null}}" Height="{Binding SelectedFloorPlan.CanvasHeight, FallbackValue=0}" Width="{Binding SelectedFloorPlan.CanvasWidth, FallbackValue=0}" ScrollViewer.VerticalScrollBarVisibility="Disabled" ScrollViewer.HorizontalScrollBarVisibility="Disabled">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="SelectionChanged">
                                        <i:InvokeCommandAction Command="{Binding SelectHueElementCommand}"/>
                                    </i:EventTrigger>
                                    <i:EventTrigger EventName="PreviewMouseDoubleClick">
                                        <i:InvokeCommandAction Command="{Binding DoubleClickObjectCommand}"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                                <ListBox.ItemContainerStyle>
                                    <Style TargetType="{x:Type ListBoxItem}">
                                        <Style.Resources>
                                            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Red"/>
                                        </Style.Resources>
                                        <Setter Property="Canvas.Top" Value="{Binding Y}"/>
                                        <Setter Property="Canvas.Left" Value="{Binding X}"/>
                                        <Style.Triggers>
                                            <EventTrigger RoutedEvent="Control.MouseDoubleClick">
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <ColorAnimation Storyboard.TargetProperty="(SolidColorBrush.Color)" To="Red" Duration="0:0:.3" AutoReverse="True"/>
                                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:.3" AutoReverse="True"/>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </EventTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ListBox.ItemContainerStyle>
                                <ListBox.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <Canvas Height="{Binding SelectedFloorPlan.CanvasHeight}" Width="{Binding SelectedFloorPlan.CanvasWidth}" IsItemsHost="True" >
                                            <Canvas.Background>
                                                <ImageBrush ImageSource="{Binding SelectedFloorPlan.Image}" Stretch="{Binding SelectedFloorPlan.StretchMode}"/>
                                            </Canvas.Background>
                                        </Canvas>
                                    </ItemsPanelTemplate>
                                </ListBox.ItemsPanel>
                                <ListBox.ItemTemplate>
                                    <DataTemplate DataType="roomMap:HueElement">
                                        <WrapPanel Height="{Binding PanelHeight}" Width="{Binding PanelWidth}" Background="{x:Null}" ToolTip="{Binding Label}">
                                            <i:Interaction.Behaviors>
                                                <behaviors:DragBehavior/>
                                            </i:Interaction.Behaviors>
                                            <Image Source="{Binding Image}" Height="{Binding ImageHeight}" Width="{Binding ImageWidth}"/>
                                            <TextBlock Text="{Binding Label}" Width="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type WrapPanel}}}" TextAlignment="Center" TextWrapping="Wrap" Visibility="{Binding LabelVisible}"/>
                                        </WrapPanel>
                                    </DataTemplate>
                                </ListBox.ItemTemplate>
                            </ListBox>
                        </ScrollViewer>
                    </Grid>
                </TabItem>
            </TabControl>
        </Grid>

    </DockPanel>

</Window>